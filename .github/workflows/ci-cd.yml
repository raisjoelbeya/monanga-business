name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  POSTGRES_USER: test_user
  POSTGRES_PASSWORD: test_password
  POSTGRES_DB: test_db

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: public.ecr.aws/docker/library/postgres:15
        env:
          # Bitnami-required env vars (expressions are not supported here)
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready -U test_user -d test_db -h 127.0.0.1
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Debug environment and dependencies
        run: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "PNPM version: $(pnpm --version)"
          echo "Current directory: $(pwd)"
          echo "Environment: $NODE_ENV"
          echo "Database URL set: ${{ secrets.DATABASE_URL != '' }}"
          echo "Google Client ID set: ${{ secrets.GOOGLE_CLIENT_ID != '' }}"
          echo "Facebook Client ID set: ${{ secrets.FACEBOOK_CLIENT_ID != '' }}"
          echo "NextAuth URL set: ${{ secrets.NEXTAUTH_URL != '' }}"
          ls -la
          echo "Files in src/app/api/auth:"
          ls -la src/app/api/auth/

      - name: Install Dependencies
        run: |
          pnpm install --frozen-lockfile
          pnpm add -g wait-on
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Set up test environment
        env:
          # Database
          DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
          # OAuth Providers - Test values
          GOOGLE_CLIENT_ID: test_google_client_id
          GOOGLE_CLIENT_SECRET: test_google_client_secret
          FACEBOOK_CLIENT_ID: test_facebook_client_id
          FACEBOOK_CLIENT_SECRET: test_facebook_client_secret
          # App config
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test_nextauth_secret
          NODE_ENV: test
        run: |
          echo "=== Test Environment Setup ==="
          echo "DATABASE_URL: $DATABASE_URL"
          echo "NEXTAUTH_URL: $NEXTAUTH_URL"
          echo "OAuth providers configured with test values"

      - name: Run Tests
        env:
          DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID || 'dev_google_client_id' }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET || 'dev_google_client_secret' }}
          FACEBOOK_CLIENT_ID: ${{ secrets.FACEBOOK_CLIENT_ID || 'dev_facebook_client_id' }}
          FACEBOOK_CLIENT_SECRET: ${{ secrets.FACEBOOK_CLIENT_SECRET || 'dev_facebook_client_secret' }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL || 'http://localhost:3000' }}
          NODE_ENV: test
        run: pnpm test

  deploy:
    name: Deploy to Vercel
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NODE_ENV: production
        run: |
          pnpm prisma generate
          pnpm prisma migrate deploy

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'